{
    /*
        tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译
        "include": 表示哪些ts文件需要被编译
            路径：
                ** 表示任意目录
                * 表示任意文件
        "exclude": 不需要哪些ts文件被编译
            默认值：
                ["node_modules","bower_components","jspm_packages"]
        "compilerOptions": 编译选项 ， 完成编译器的配置 ( 有很多子选项 )
    */
    "include":[
        "./src/**/*"
    ],
    // "exclude": [
    //     "./chapter1/01_hello.ts",
    //     "./chapter1/02_basic.ts",
    //     "./chapter1/03_types.ts"
    // ],
    "compilerOptions": {
        // target 用来指定 ts 被编译的es 版本  ( 可以传入错误的值 ，查看正确的取值的选项 )
        "target":"es2015",
        
        // module 指定要使用的模块化的规范
        "module":"amd",
        
        //lib 用来指定项目中要使用的库 ( 默认就够用了 )
        // "lib":["dom"],
        
        //outDir 指定编译后文件所在的目录
        "outDir": "./dist",

        //outFile 将代码合并为一个文件
        // 设置outFile 所有的全局作用域中的代码会合并到同一个文件中
        // "outFile": "./dist/app.js",

        // 是否对js文件 进行编译 ， 默认是false
        "allowJs": false,

        // 检查js代码是否符合语法规范 ( 类型检测 )
        "checkJs": false,

        // 是否移除注释
        "removeComments":true,

        // 不生成编译后的文件 默认是false
        // "noEmit": false,

        // 有错误的时候不生成编译文件 默认是false
        // "noEmitOnError": false,
    
        // 所有严格检查的开关 也就是统一控制下述各种严格配置选项
        "strict": false,
        
        //默认是不使用严格模式的 用来设置编译后的文件是否使用严格模式
        // 当有模块化的代码时  也会默认是严格模式
        "alwaysStrict": false,

        // 没有指定参数类型 默认是any
        // 设为true 对于隐式any 会进行检测
        "noImplicitAny": false,

        // 不允许不明确类型的this ： 也就是说函数的调用要明确
        "noImplicitThis": false,

        // 严格的检查空值 期待函数的返回对象，必须要存在 ( 设为true时 )
        "strictNullChecks": false,
        
    } 
}